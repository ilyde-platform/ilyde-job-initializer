#
# Copyright (c) 2020-2021 Hopenly srl.
#
# This file is part of Ilyde.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from protos import dataset_pb2 as dataset__pb2


class DatasetServicesStub(object):
    """The datasets service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RetrieveDataset = channel.unary_unary(
                '/datasets.DatasetServices/RetrieveDataset',
                request_serializer=dataset__pb2.ID.SerializeToString,
                response_deserializer=dataset__pb2.Dataset.FromString,
                )
        self.CreateDataset = channel.unary_unary(
                '/datasets.DatasetServices/CreateDataset',
                request_serializer=dataset__pb2.Dataset.SerializeToString,
                response_deserializer=dataset__pb2.Dataset.FromString,
                )
        self.UpdateDataset = channel.unary_unary(
                '/datasets.DatasetServices/UpdateDataset',
                request_serializer=dataset__pb2.Dataset.SerializeToString,
                response_deserializer=dataset__pb2.Dataset.FromString,
                )
        self.DeleteDataset = channel.unary_unary(
                '/datasets.DatasetServices/DeleteDataset',
                request_serializer=dataset__pb2.ID.SerializeToString,
                response_deserializer=dataset__pb2.Status.FromString,
                )
        self.SearchDatasets = channel.unary_unary(
                '/datasets.DatasetServices/SearchDatasets',
                request_serializer=dataset__pb2.SearchDatasetRequest.SerializeToString,
                response_deserializer=dataset__pb2.SearchDatasetResponse.FromString,
                )
        self.RetrieveVersion = channel.unary_unary(
                '/datasets.DatasetServices/RetrieveVersion',
                request_serializer=dataset__pb2.ID.SerializeToString,
                response_deserializer=dataset__pb2.Version.FromString,
                )
        self.CreateVersion = channel.unary_unary(
                '/datasets.DatasetServices/CreateVersion',
                request_serializer=dataset__pb2.Version.SerializeToString,
                response_deserializer=dataset__pb2.Version.FromString,
                )
        self.SearchVersions = channel.unary_unary(
                '/datasets.DatasetServices/SearchVersions',
                request_serializer=dataset__pb2.SearchVersionRequest.SerializeToString,
                response_deserializer=dataset__pb2.SearchVersionResponse.FromString,
                )
        self.CreateBucket = channel.unary_unary(
                '/datasets.DatasetServices/CreateBucket',
                request_serializer=dataset__pb2.Bucket.SerializeToString,
                response_deserializer=dataset__pb2.Bucket.FromString,
                )


class DatasetServicesServicer(object):
    """The datasets service definition.
    """

    def RetrieveDataset(self, request, context):
        """Retrieve a dataset With ObjectID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateDataset(self, request, context):
        """Create a dataset using information
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDataset(self, request, context):
        """Update a dataset using information
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteDataset(self, request, context):
        """Delete a dataset with ObjectID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchDatasets(self, request, context):
        """Search for datasets
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetrieveVersion(self, request, context):
        """Retrieve a dataset's version passing the version's id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateVersion(self, request, context):
        """Create a dataset version passing a Dataset's ID for which to create a version
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchVersions(self, request, context):
        """Search for dataset's versions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateBucket(self, request, context):
        """Create bucket
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DatasetServicesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RetrieveDataset': grpc.unary_unary_rpc_method_handler(
                    servicer.RetrieveDataset,
                    request_deserializer=dataset__pb2.ID.FromString,
                    response_serializer=dataset__pb2.Dataset.SerializeToString,
            ),
            'CreateDataset': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDataset,
                    request_deserializer=dataset__pb2.Dataset.FromString,
                    response_serializer=dataset__pb2.Dataset.SerializeToString,
            ),
            'UpdateDataset': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDataset,
                    request_deserializer=dataset__pb2.Dataset.FromString,
                    response_serializer=dataset__pb2.Dataset.SerializeToString,
            ),
            'DeleteDataset': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteDataset,
                    request_deserializer=dataset__pb2.ID.FromString,
                    response_serializer=dataset__pb2.Status.SerializeToString,
            ),
            'SearchDatasets': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchDatasets,
                    request_deserializer=dataset__pb2.SearchDatasetRequest.FromString,
                    response_serializer=dataset__pb2.SearchDatasetResponse.SerializeToString,
            ),
            'RetrieveVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.RetrieveVersion,
                    request_deserializer=dataset__pb2.ID.FromString,
                    response_serializer=dataset__pb2.Version.SerializeToString,
            ),
            'CreateVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateVersion,
                    request_deserializer=dataset__pb2.Version.FromString,
                    response_serializer=dataset__pb2.Version.SerializeToString,
            ),
            'SearchVersions': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchVersions,
                    request_deserializer=dataset__pb2.SearchVersionRequest.FromString,
                    response_serializer=dataset__pb2.SearchVersionResponse.SerializeToString,
            ),
            'CreateBucket': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBucket,
                    request_deserializer=dataset__pb2.Bucket.FromString,
                    response_serializer=dataset__pb2.Bucket.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'datasets.DatasetServices', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DatasetServices(object):
    """The datasets service definition.
    """

    @staticmethod
    def RetrieveDataset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/datasets.DatasetServices/RetrieveDataset',
            dataset__pb2.ID.SerializeToString,
            dataset__pb2.Dataset.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateDataset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/datasets.DatasetServices/CreateDataset',
            dataset__pb2.Dataset.SerializeToString,
            dataset__pb2.Dataset.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateDataset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/datasets.DatasetServices/UpdateDataset',
            dataset__pb2.Dataset.SerializeToString,
            dataset__pb2.Dataset.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteDataset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/datasets.DatasetServices/DeleteDataset',
            dataset__pb2.ID.SerializeToString,
            dataset__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SearchDatasets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/datasets.DatasetServices/SearchDatasets',
            dataset__pb2.SearchDatasetRequest.SerializeToString,
            dataset__pb2.SearchDatasetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RetrieveVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/datasets.DatasetServices/RetrieveVersion',
            dataset__pb2.ID.SerializeToString,
            dataset__pb2.Version.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/datasets.DatasetServices/CreateVersion',
            dataset__pb2.Version.SerializeToString,
            dataset__pb2.Version.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SearchVersions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/datasets.DatasetServices/SearchVersions',
            dataset__pb2.SearchVersionRequest.SerializeToString,
            dataset__pb2.SearchVersionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateBucket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/datasets.DatasetServices/CreateBucket',
            dataset__pb2.Bucket.SerializeToString,
            dataset__pb2.Bucket.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
